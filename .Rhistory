df_level1 %>%
mutate_at(.funs = funs(as.factor), .vars = chr_to_factor_vars)
str(df_level1_test_old)
df_level1_test_new <-
df_level1 %>%
mutate(across(c(keen_move,
current_work,
before_work,
city_size,
gender,
age,
education),
factor))
str(df_level1_test_new)
glm_function<-function(y, x, dataset){
f <- as.formula(paste(y, x, sep="~"))
predictorvariable <- glm(formula=f, data=dataset, family = "binomial")
return(predictorvariable)
}
# function for basic R plot with colours and threshold labels
plot_ROC_function <- function(plot_dataset, plot_title, plot_subtitle) {
plot(plot_dataset, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
title(plot_title, sub = plot_subtitle,
cex.main = 2,   font.main= 4, col.main= "blue",
cex.sub = 0.75, font.sub = 3, col.sub = "red")
}
# specificity sensitivity function
sesp_func <- function(sesp_variable, predict_variable, threshold) {
# sensitivity = c()
# specificity = c()
# confmat_train = c()
confmat_train = table(sesp_variable, predict_variable > threshold)
sensitivity = confmat_train[1 , 1] / sum(confmat_train[ , 1])
specificity = confmat_train[2 , 2] / sum(confmat_train[ , 2])
return(list(sensitivity, specificity))
}
df_level2 <- df1 %>%
mutate_at(vars(curr_sal,
exp_sal,
hf_com,
ab_com), ~replace_na(., 0))
# rename columns to remove `np_` prefix
df_level2 <- df_level2 %>%
dplyr::rename_all(
funs(stringr::str_replace_all(., "np_", ""))
)
library(messydatapackage)
shiny::runApp()
library(messydatapackage)
runApp()
str(df_level2)
str(df1)
library(messydatapackage)
runApp()
str(df1)
str(df_level1)
library(messydatapackage)
runApp()
str(df1)
str(df_level1)
str(df_level2)
str(level2_Test)
str(level2_Train)
runApp()
library(messydatapackage)
runApp()
library(messydatapackage)
runApp()
library(messydatapackage)
runApp()
library(messydatapackage)
runApp()
str(df1)
df1 <- df1 %>%
dplyr::rename_all(
funs(stringr::str_replace_all(., "np_", ""))
)
str(df1)
library(tidyverse)
library(corrplot)
library(caTools)
library(ROCR)
library(plotROC)
library(gplots)
# general data transformation
###### tidyverse
# Read CSV into R
df1 <- read.csv(file="messy-data.csv", header=TRUE, sep=",", stringsAsFactors = F)
# set as general option that Strings are not factors
options(stringsAsFactors = FALSE)
# save all column names
old_names1 <- colnames(df1)
new_names = c("np_id","np_look_work", "np_current_work",
"hf_A", "ac_A",
"hf_B", "ac_B",
"hf_C", "ac_C",
"hf_D", "ac_D",
"hf_E", "ac_E",
"hf_F", "ac_F",
"cs_1", "se_1",
"cs_2", "se_2",
"cs_3", "se_3",
"cs_4", "se_4",
"cs_5", "se_5",
"cs_6", "se_6",
"cs_7", "se_7",
"cs_8", "se_8",
"np_before_work",
"np_keen_move",
"np_city_size",
"np_gender",
"np_age",
"np_education")
# rename columns with old_names and new_names vectors
df1 <- df1 %>% rename_at(vars(old_names1), ~ new_names)
# filter rows with yes for Column look_job
# code needs dplyr::filter to ensure base filter not used
df1 <- dplyr::filter(df1, np_look_work == "yes")
# match all strings ending with job and replace with 1
# .*
df1 <- df1 %>%
mutate_all(funs(str_replace_all(., '.*job$', '1')))
# reorder columns
df1 <- df1 %>% select(np_id, ends_with('work'), np_before_work:np_education, starts_with('hf_'),
starts_with('ac_'), starts_with('cs_'), starts_with('se_'))
# change the blanks to NA
df1 <- mutate_all(df1, funs(na_if(.,"")))
# pivot_longer  - transforms the columns in wide format starting with 'hf' and 'ac' to long format in separate columns
# names_to parameters:
# .value = contains metadata on the cell values that correspond to the original columns
# these values are pivoted in long format and added in a new columns "hf" and "ac"
# column "group" has the original column endings (e.g. the numbers 1-6) pivoted to long format
# names_pattern = regex argument specifying character "_" where column names are to be broken up
# create key column com_level for 6 levels of commuting and move values to long format
df1 <- df1 %>%
tidyr::pivot_longer(cols = c(starts_with("hf"), starts_with("ac")),
names_to = c(".value", "com_level"),
names_pattern = "(.*)_(.*)"
)
# create key column sal_level for 8 levels of salary and move values to long format
df1 <- df1 %>%
tidyr::pivot_longer(cols = c(starts_with("cs"), starts_with("se")),
names_to = c(".value", "sal_level"),
names_pattern = "(.*)_(.*)"
# values_drop_na = TRUE
)
# omit only those rows where columns hf, ac  are all NA
df1 <- df1[!(is.na(df1$hf)) | !(is.na(df1$ac)),]
# omit only those rows where columns cs, se are all NA
df1 <- df1[!(is.na(df1$cs)) | !(is.na(df1$se)),]
# set up character vectors for old and new column names
col.from <- c("hf", "ac", "cs", "se")
col.to <- c("hf_com", "ab_com", "curr_sal", "exp_sal")
# rename old columns
df1 <- df1 %>% rename_at(vars(col.from), function(x) col.to)
getwd()
setwd("~/messydatapackage/data/csv_examples")
library(tidyverse)
library(corrplot)
library(caTools)
library(ROCR)
library(plotROC)
library(gplots)
# general data transformation
###### tidyverse
# Read CSV into R
df1 <- read.csv(file="messy-data.csv", header=TRUE, sep=",", stringsAsFactors = F)
# set as general option that Strings are not factors
options(stringsAsFactors = FALSE)
# save all column names
old_names1 <- colnames(df1)
new_names = c("np_id","np_look_work", "np_current_work",
"hf_A", "ac_A",
"hf_B", "ac_B",
"hf_C", "ac_C",
"hf_D", "ac_D",
"hf_E", "ac_E",
"hf_F", "ac_F",
"cs_1", "se_1",
"cs_2", "se_2",
"cs_3", "se_3",
"cs_4", "se_4",
"cs_5", "se_5",
"cs_6", "se_6",
"cs_7", "se_7",
"cs_8", "se_8",
"np_before_work",
"np_keen_move",
"np_city_size",
"np_gender",
"np_age",
"np_education")
# rename columns with old_names and new_names vectors
df1 <- df1 %>% rename_at(vars(old_names1), ~ new_names)
# filter rows with yes for Column look_job
# code needs dplyr::filter to ensure base filter not used
df1 <- dplyr::filter(df1, np_look_work == "yes")
# match all strings ending with job and replace with 1
# .*
df1 <- df1 %>%
mutate_all(funs(str_replace_all(., '.*job$', '1')))
# reorder columns
df1 <- df1 %>% select(np_id, ends_with('work'), np_before_work:np_education, starts_with('hf_'),
starts_with('ac_'), starts_with('cs_'), starts_with('se_'))
# change the blanks to NA
df1 <- mutate_all(df1, funs(na_if(.,"")))
# create key column com_level for 6 levels of commuting and move values to long format
df1 <- df1 %>%
tidyr::pivot_longer(cols = c(starts_with("hf"), starts_with("ac")),
names_to = c(".value", "com_level"),
names_pattern = "(.*)_(.*)"
)
# create key column sal_level for 8 levels of salary and move values to long format
df1 <- df1 %>%
tidyr::pivot_longer(cols = c(starts_with("cs"), starts_with("se")),
names_to = c(".value", "sal_level"),
names_pattern = "(.*)_(.*)"
# values_drop_na = TRUE
)
# omit only those rows where columns hf, ac  are all NA
df1 <- df1[!(is.na(df1$hf)) | !(is.na(df1$ac)),]
# omit only those rows where columns cs, se are all NA
df1 <- df1[!(is.na(df1$cs)) | !(is.na(df1$se)),]
# set up character vectors for old and new column names
col.from <- c("hf", "ac", "cs", "se")
col.to <- c("hf_com", "ab_com", "curr_sal", "exp_sal")
# rename old columns
df1 <- df1 %>% rename_at(vars(col.from), function(x) col.to)
str(df1)
df1_old <- df1 %>%
dplyr::rename_all(
funs(stringr::str_replace_all(., "np_", ""))
)
str(df1_old)
df1_new <- df1 %>%
rename_all(~stringr::str_replace(.,"^np_",""))
str(df1_new)
library(messydatapackage)
runApp('~/messydatapackage')
runApp()
library(messydatapackage)
runApp()
library(messydatapackage)
runApp()
library(messydatapackage)
runApp()
library(messydatapackage)
runApp()
library(messydatapackage)
runApp()
str(df1)
Q
Q
library(messydatapackage)
runApp()
getwd()
setwd("~/messydatapackage/data/csv_examples")
library(tidyverse)
library(corrplot)
library(caTools)
library(ROCR)
library(plotROC)
library(gplots)
# general data transformation
###### tidyverse
# Read CSV into R
df1 <- read.csv(file="messy-data.csv", header=TRUE, sep=",", stringsAsFactors = F)
options(stringsAsFactors = FALSE)
# save all column names
old_names1 <- colnames(df1)
new_names = c("np_id","np_look_work", "np_current_work",
"hf_A", "ac_A",
"hf_B", "ac_B",
"hf_C", "ac_C",
"hf_D", "ac_D",
"hf_E", "ac_E",
"hf_F", "ac_F",
"cs_1", "se_1",
"cs_2", "se_2",
"cs_3", "se_3",
"cs_4", "se_4",
"cs_5", "se_5",
"cs_6", "se_6",
"cs_7", "se_7",
"cs_8", "se_8",
"np_before_work",
"np_keen_move",
"np_city_size",
"np_gender",
"np_age",
"np_education")
# rename columns with old_names and new_names vectors
df1 <- df1 %>% rename_at(vars(old_names1), ~ new_names)
# filter rows with yes for Column look_job
# code needs dplyr::filter to ensure base filter not used
df1 <- dplyr::filter(df1, np_look_work == "yes")
# match all strings ending with job and replace with 1
# .*
df1 <- df1 %>%
mutate_all(funs(str_replace_all(., '.*job$', '1')))
# reorder columns
df1 <- df1 %>% select(np_id, ends_with('work'), np_before_work:np_education, starts_with('hf_'),
starts_with('ac_'), starts_with('cs_'), starts_with('se_'))
# change the blanks to NA
df1 <- mutate_all(df1, funs(na_if(.,"")))
# pivot_longer  - transforms the columns in wide format starting with 'hf' and 'ac' to long format in separate columns
# names_to parameters:
# .value = contains metadata on the cell values that correspond to the original columns
# these values are pivoted in long format and added in a new columns "hf" and "ac"
# column "group" has the original column endings (e.g. the numbers 1-6) pivoted to long format
# names_pattern = regex argument specifying character "_" where column names are to be broken up
# create key column com_level for 6 levels of commuting and move values to long format
df1 <- df1 %>%
tidyr::pivot_longer(cols = c(starts_with("hf"), starts_with("ac")),
names_to = c(".value", "com_level"),
names_pattern = "(.*)_(.*)"
)
# create key column sal_level for 8 levels of salary and move values to long format
df1 <- df1 %>%
tidyr::pivot_longer(cols = c(starts_with("cs"), starts_with("se")),
names_to = c(".value", "sal_level"),
names_pattern = "(.*)_(.*)"
# values_drop_na = TRUE
)
# omit only those rows where columns hf, ac  are all NA
df1 <- df1[!(is.na(df1$hf)) | !(is.na(df1$ac)),]
# omit only those rows where columns cs, se are all NA
df1 <- df1[!(is.na(df1$cs)) | !(is.na(df1$se)),]
# set up character vectors for old and new column names
col.from <- c("hf", "ac", "cs", "se")
col.to <- c("hf_com", "ab_com", "curr_sal", "exp_sal")
# rename old columns
df1 <- df1 %>% rename_at(vars(col.from), function(x) col.to)
str(df1)
df1_old <- df1 %>%
dplyr::rename_all(
funs(stringr::str_replace_all(., "np_", ""))
)
df1_new <- df1 %>%
rename_all(~stringr::str_replace(.,"^np_",""))
################ Task 1 - distribution of the expected net income (se) in relation to the current net income (cs)
############### create matrix for calculation of statistics ############################
# create table with frequency counts for exp_sal and curr_sal per category of level
#
cs_es_table <- df1 %>%
dplyr::count(sal_level, exp_sal, curr_sal) %>%
tidyr::spread(key = sal_level,value = n) %>%
select(curr_sal, exp_sal, 1, 2, 3, 4, 5, 6, 7, -8) %>% # reorder columns and omit Column 8 (no answer)
as.data.frame()
# save all column names
old_cs_es_names <- colnames(cs_es_table)
# old_cs_es_names
# create vector with new column names for salary levels - no entries for 5001-6000 EUR or > 6000 EUR
new_sal_names1 <- c("curr_sal",
"exp_sal",
"< 1000 EUR",
"1001-1500 EUR",
"2001-3000 EUR",
"3001-4000 EUR",
"4001-5000 EUR")
# rename columns with old_names and new_names vectors
cs_es_table <- cs_es_table %>% rename_at(vars(old_cs_es_names), ~ new_sal_names1)
# convert cs_es_table to long format and summarise exp_sal and curr_sal frequencies
cs_es_table <- cs_es_table %>%
gather(key, value, -curr_sal,-exp_sal) %>% # crucial step to make data long
mutate(curr_val = ifelse(curr_sal == 1,value,NA),
exp_val = ifelse(exp_sal == 1,value,NA)) %>% #mutate actually cleans up the data and assigns a value to each new column for 'exp' and 'curr'
group_by(key) %>% #for your summary, because you want to sum up your previous rows which are now assigned a key in a new column
summarise_at( .vars = vars(curr_val, exp_val), .funs = sum, na.rm = TRUE)
# move column heading to rowname
cs_es_table <- cs_es_table %>%
column_to_rownames(var = "key") %>%
as.data.frame()
# save all new column names
old_cs_es_names2 <- colnames(cs_es_table)
new_sal_names2 <- c("Current Salary",
"Expected Salary")
# rename columns with old_names and new_names vectors
cs_es_table <- cs_es_table %>% rename_at(vars(old_cs_es_names2), ~ new_sal_names2)
################ Task 2 - correlations desire to earn more (se) between possibility to commute longer (ab)
############### create matrix for calculation of statistics ############################
# select the columns to check for correlations
# this counts all the exp_sal by sal_level and all the ab_com by com_level
# this is similar to the result in task 1
es_ab_table <- df1 %>%
dplyr::count(sal_level, exp_sal, com_level, ab_com) %>%
as.data.frame()
######## pivot salary columns wider - remove ab_com and NA
es_ab_table <- es_ab_table %>%
pivot_wider(names_from = c(sal_level, exp_sal), values_from = n) %>%
select(-ab_com, -ends_with("NA"))
#  need to combine and summarise rows
es_ab_table <- es_ab_table %>%
group_by(com_level) %>%
summarise_all(sum) %>%
ungroup()
old_es_ab_names <- colnames(es_ab_table)
new_sal_names3 <- c("com_level",
"< 1000 EUR",
"1001-1500 EUR",
"2001-3000 EUR",
"3001-4000 EUR",
"4001-5000 EUR",
"5001-6000 EUR",
"> 6000 EUR",
"no answer")
# rename columns with old_names and new_names vectors
es_ab_table <- es_ab_table %>% rename_at(vars(old_es_ab_names), ~ new_sal_names3)
# recode values in the first column - need to specify library dplyr with recode function
es_ab_table <- es_ab_table %>% mutate(com_level=dplyr::recode(com_level, "A" = "< 5 km",
"B" = "5 - 10 km",
"C" = "11 - 20 km",
"D" = "21 - 50 km",
"E" = "51 - 100 km",
"F" = "> 100 km"))
# replace NA values with zeros and remove "no answer column"
es_ab_table_1 <- es_ab_table %>% mutate_all(funs(replace_na(., 0))) %>%
select(-c("no answer"))
View(es_ab_table_1)
es_ab_table_2 <- es_ab_table %>% replace(is.na(.), 0) %>%
select(-c("no answer"))
View(es_ab_table_2)
View(es_ab_table_1)
View(es_ab_table_2)
View(es_ab_table_1)
es_ab_table_1 <- es_ab_table_2 %>%
column_to_rownames(var = "com_level") %>%
as.data.frame()
View(es_ab_table_1)
es_ab_table_2 <- es_ab_table_2 %>%
column_to_rownames(var = "com_level") %>%
as.data.frame()
library(messydatapackage)
runApp('~/messydatapackage')
use_readme_rmd()
usethis::use_readme_rmd()
library(messydatapackage)
snapshot_accept('chained_functions_serialize')
testthat::snapshot_accept('chained_functions_serialize')
testthat::snapshot_accept('chained_functions_serialize')
testthat::snap_names
testthat:::snap_names()
path <- testthat:::local_snapshot_dir(c("a", "b"))
path
dir(file.path(path, "_snaps")), c("a.md", "b.md")
dir(file.path(path, "_snaps"))
shiny::runApp()
library(messydatapackage)
runApp()
View(cs_es_table)
runApp()
View(es_ab_table)
str(es_ab_table)
View(cs_es_table)
str(cs_es_table)
library(tidyverse)
sample_data <- tibble(demographics = c("White / Female", "Non-White / Female", "White / Male", "Non-White / Male", "White / Transgender", "Non-White / Transgender"),
wave_1 = c(40, 38, 60, 56, 0, 2),
wave_2 = c(38, 39, 62, 58, 1, 0))
library(tidyverse)
sample_data <- tibble(demographics = c("White / Female", "Non-White / Female", "White / Male", "Non-White / Male", "White / Transgender", "Non-White / Transgender"),
wave_1 = c(40, 38, 60, 56, 0, 2),
wave_2 = c(38, 39, 62, 58, 1, 0))
sample_data
library(stats)
chisq.test(sample_data)
sample_data %>%
column_to_rownames('demographics') %>%
as.matrix %>%
chisq.test
library(messydatapackage)
#' correct=FALSE - don't apply continuity correction when computing the test statistic for 2 by 2 tables:
#' simulate.p.value = true - compute p-values by Monte Carlo simulation.
#'
#'
#' @param table
#'
#' @return chisq
#' @export
#'
#' @examples
chisq_function <- function(table) {
chisq <- chisq.test(table, correct=FALSE, simulate.p.value = TRUE)
return(chisq)
}
runApp()
cs_es_table <- messydatapackage::create_cs_es_table(general_pre_proc)
general_pre_proc <- messydatapackage::general_data_preprocess(df1)
getwd()
library(messydatapackage)
shiny::runApp()
library(messydatapackage)
shiny::runApp()
df1 <- readr::read_csv(file="./inst/extdata/messy-data-tail.csv", col_names=TRUE, col_types = readr::cols())
df1 <- general_data_preprocess(df1)
df1 <- messydatapackage::general_data_preprocess(df1)
library(magrittr)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
# call general data-preprocessing
df1 <- messydatapackage::general_data_preprocess(df1)
View(df1)
library(messydatapackage)
library(messydatapackage)
library(messydatapackage)
library(messydatapackage)
shiny::runApp()
covr::package_coverage()
covr::file_coverage("stats_functions.R")
